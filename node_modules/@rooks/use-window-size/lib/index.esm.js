import { useState, useEffect } from 'react';

const initialValue = {
    innerWidth: null,
    innerHeight: null,
    outerWidth: null,
    outerHeight: null
};
/**
 * useWindowSize
 *
 * A hook that provides information of the dimensions of the window
 *
 * @return {WindowDimensions}  Dimensions of the window
 */
function useWindowSize() {
    const [windowSize, setWindowSize] = useState(initialValue);
    function fetchWindowDimensionsAndSave() {
        setWindowSize({
            innerWidth: window.innerWidth,
            innerHeight: window.innerHeight,
            outerWidth: window.outerWidth,
            outerHeight: window.outerHeight
        });
    }
    // run on mount
    useEffect(() => {
        // run only once
        fetchWindowDimensionsAndSave();
    }, []);
    // set resize handler once on mount and clean before unmount
    useEffect(() => {
        window.addEventListener("resize", fetchWindowDimensionsAndSave);
        return () => {
            window.removeEventListener("resize", fetchWindowDimensionsAndSave);
        };
    }, []);
    return windowSize;
}

export default useWindowSize;
//# sourceMappingURL=index.esm.js.map
