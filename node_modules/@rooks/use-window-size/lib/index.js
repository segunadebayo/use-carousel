(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
  typeof define === 'function' && define.amd ? define(['react'], factory) :
  (global = global || self, global.useWindowSize = factory(global.React));
}(this, function (react) { 'use strict';

  const initialValue = {
      innerWidth: null,
      innerHeight: null,
      outerWidth: null,
      outerHeight: null
  };
  /**
   * useWindowSize
   *
   * A hook that provides information of the dimensions of the window
   *
   * @return {WindowDimensions}  Dimensions of the window
   */
  function useWindowSize() {
      const [windowSize, setWindowSize] = react.useState(initialValue);
      function fetchWindowDimensionsAndSave() {
          setWindowSize({
              innerWidth: window.innerWidth,
              innerHeight: window.innerHeight,
              outerWidth: window.outerWidth,
              outerHeight: window.outerHeight
          });
      }
      // run on mount
      react.useEffect(() => {
          // run only once
          fetchWindowDimensionsAndSave();
      }, []);
      // set resize handler once on mount and clean before unmount
      react.useEffect(() => {
          window.addEventListener("resize", fetchWindowDimensionsAndSave);
          return () => {
              window.removeEventListener("resize", fetchWindowDimensionsAndSave);
          };
      }, []);
      return windowSize;
  }

  return useWindowSize;

}));
//# sourceMappingURL=index.js.map
