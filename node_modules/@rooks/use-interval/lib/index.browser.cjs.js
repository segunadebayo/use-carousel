'use strict';

var react = require('react');

// See also: https://overreacted.io/making-setinterval-declarative-with-react-hooks/
/**
 *
 * useInterval hook
 *
 * Declaratively creates a setInterval to run a callback after a fixed
 * amount of time
 *
 *@param {funnction} callback - Callback to be fired
 *@param {number} intervalId - Interval duration in milliseconds after which the callback is to be fired
 *@param {boolean} startImmediate - Whether the interval should start immediately on initialise
 *@return {IntervalHandler}
 */
function useInterval(callback, intervalDuration, startImmediate = false) {
    const [intervalId, setIntervalId] = react.useState(null);
    const [isRunning, setIsRunning] = react.useState(startImmediate);
    const savedCallback = react.useRef();
    function start() {
        if (!isRunning) {
            setIsRunning(true);
        }
    }
    function stop() {
        if (isRunning) {
            setIsRunning(false);
        }
    }
    // Remember the latest callback.
    react.useEffect(() => {
        savedCallback.current = callback;
    });
    // Set up the interval.
    react.useEffect(() => {
        function tick() {
            savedCallback.current && savedCallback.current();
        }
        if (intervalDuration !== null && isRunning) {
            let id = setInterval(tick, intervalDuration);
            setIntervalId(id);
            return () => clearInterval(id);
        }
    }, [intervalDuration, isRunning]);
    let handler;
    handler = [start, stop, intervalId];
    handler.start = start;
    handler.stop = stop;
    handler.intervalId = intervalId;
    return handler;
}

module.exports = useInterval;
//# sourceMappingURL=index.browser.cjs.js.map
