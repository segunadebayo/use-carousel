(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
  typeof define === 'function' && define.amd ? define(['react'], factory) :
  (global = global || self, global.usePrevious = factory(global.React));
}(this, function (react) { 'use strict';

  /**
   *
   * usePrevious hook for React
   *
   * @param {*} currentValue The value whose previous value is to be tracked
   * @returns {*} The previous value
   */
  function usePrevious(currentValue) {
      const prevRef = react.useRef(null);
      react.useEffect(() => {
          prevRef.current = currentValue;
      }, [currentValue]);
      return prevRef.current;
  }

  return usePrevious;

}));
//# sourceMappingURL=index.js.map
